UniqueUserEmailChecker
This Java program takes input from the regSimUserData for username and email address and stores it in a HashMap.
It checks if the username and email are already in use and if they are, it outputs the relevant message.
If both the username and email are unique, it adds the entry to the HashMap and outputs a message saying so.
The program stops when the regSimUserData inputs "stop" for the username.

Access Granted!
import java.util.HashMap;
import java.util.Scanner;

public class UniqueUserCheckerUpdated {
    public static void main(String[] args) {
        HashMap<String, String> users = new HashMap<>();
        users.put("dummyUsername", "dummyEmail@example.com");

        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a username: ");
        String username = scanner.nextLine();

        System.out.print("Enter an email address: ");
        String email = scanner.nextLine();

        if (!users.containsKey(username)) {
            System.out.println("Incorrect username.");
        } else if (!users.get(username).equals(email)) {
            System.out.println("Incorrect email address.");
        } else {
            System.out.println("Access granted!");
        }
    }
}

Here's an example implementation of a class that allows a user to choose which drink they want to order for their tab, based on the UML

import java.util.ArrayList;
import java.util.List;

// BeverageClass interface
interface BeverageClass {
    void mix();
    double cost();
}

// ConcreteShot class
class ConcreteShot implements BeverageClass {
    public ConcreteShot() {
        System.out.println("Ordering a shot.");
    }

    @Override
    public void mix() {
        System.out.println("Mixing the shot.");
    }

    @Override
    public double cost() {
        return 5.0;
    }
}

// ConcreteCocktail class
class ConcreteCocktail implements BeverageClass {
    public ConcreteCocktail() {
        System.out.println("Ordering a cocktail.");
    }

    @Override
    public void mix() {
        System.out.println("Mixing the cocktail.");
    }

    @Override
    public double cost() {
        return 10.0;
    }
}

// BeverageDecorator abstract class
abstract class BeverageDecorator implements BeverageClass {
    protected BeverageClass wrappedBeverageClass;

    public BeverageDecorator(BeverageClass wrappedBeverageClass) {
        this.wrappedBeverageClass = wrappedBeverageClass;
    }

    @Override
    public void mix() {
        wrappedBeverageClass.mix();
    }

    @Override
    public double cost() {
        return wrappedBeverageClass.cost();
    }
}

// AddMixer class
class AddMixer extends BeverageDecorator {
    private Mixers mixer;

    public AddMixer(BeverageClass wrappedBeverageClass, Mixers mixer) {
        super(wrappedBeverageClass);
        this.mixer = mixer;
    }

    @Override
    public void mix() {
        super.mix();
        System.out.println("Adding " + mixer.name() + " to the drink.");
    }

    @Override
    public double cost() {
        return super.cost() + 1.0;
    }

    public void newBehavior() {
        System.out.println("Adding new behavior to the drink.");
    }
}

// AddAlcohol class
class AddAlcohol extends BeverageDecorator {
    private Alcohols alcohol;

    public AddAlcohol(BeverageClass wrappedBeverageClass, Alcohols alcohol) {
        super(wrappedBeverageClass);
        this.alcohol = alcohol;
    }

    @Override
    public void mix() {
        super.mix();
        System.out.println("Adding " + alcohol.name() + " to the drink.");
    }

    @Override
    public double cost() {
        return super.cost() + 2.0;
    }
}

// Alcohols enumeration class
enum Alcohols {
    vodka,
    gin,
    fireball,
}

// Mixers enumeration class
enum Mixers {
    juice
}

// Tab class
class Tab {
    private List<BeverageClass> beverages = new ArrayList<>();

    public void orderDrink(String drinkType, Alcohols alcohol, Mixers mixer) {
        BeverageClass drink;
        if (drinkType.equalsIgnoreCase("shot")) {
            drink = new ConcreteShot();
        } else if (drinkType.equalsIgnoreCase("cocktail")) {
            drink = new ConcreteCocktail();
        } else {
            System.out.println("Invalid drink type.");
            return;
        }

        if (alcohol != null) {
            drink = new AddAlcohol(drink, alcohol);
        }
        if (mixer != null) {
            drink = new AddMixer(drink, mixer);
        }

        beverages.add(drink);
    }

    public double calculateTotal() {
